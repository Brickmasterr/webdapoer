<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Add New Product</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="productForm" action="/dashboard/addproduct" method="POST">
                    <div class="form-group">
                        <label for="product-name" class="col-form-label">Nama Produk:</label>
                        <input type="text" name="productName" class="form-control" id="product-name">
                    </div>
                    <div class="form-group">
                        <label for="description" class="col-form-label">Deskripsi:</label>
                        <textarea class="form-control" name="productDescription" id="description"></textarea>
                    </div>
                    <div class="form-group">
                        <label>File upload</label>
                        <input type="file" id="file-upload" name="productImage" class="file-upload-default"
                            accept="image/*">
                        <div class="input-group col-xs-12">
                            <input type="text" class="form-control file-upload-info" disabled
                                placeholder="Upload Image">
                            <span class="input-group-append">
                                <button class="file-upload-browse btn btn-primary" type="button">Upload</button>
                            </span>
                        </div>
                    </div>
                    <div class="form-group">
                      <h4 class="card-title">Current Photo Product</h4>
                      <img src="//placehold.it/100" id="photoProductView" width="80%" height="80%"/>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Send message</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    function Confirmation(cb, preConfirmFunction) {
      Swal.fire({
        title: "Are you sure?",
        text: "You won't be able to revert this!",
        icon: "warning",
        showLoaderOnConfirm: true,
        showCancelButton: true,
        customClass: {
            confirmButton: 'btn btn-primary btn-lg mr-2',
            cancelButton: 'btn btn-danger btn-lg',
            loader: 'custom-loader',
        },
        preConfirm: preConfirmFunction,
        allowOutsideClick: () => !Swal.isLoading(),
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Confirm"
      }).then((result) => {
        cb(result);
      });
    }
    document.addEventListener('DOMContentLoaded', function () {
        const ProductPhotoView = document.getElementById("photoProductView");
        const fileInput = document.getElementById('file-upload');
        const formData = new FormData();
        // Add an event listener to trigger the file upload when a file is selected
        fileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            // console.log(file);
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    $('#photoProductView').attr('src', e.target.result);
                }
                reader.readAsDataURL(file);
            }
            formData.append('productImage', file);
        });

        var form = document.getElementById('productForm');

        form.addEventListener('submit', function (event) {
            event.preventDefault(); // Mencegah pengiriman form default
            Confirmation((result) => {
                if (result.isConfirmed) {
                    // console.log(result);
                    // testUpload(); // Panggil fungsi yang diinginkan
                    // console.log('test', fileInput.value);
                    handleResponse(result.value);
                }
            }, async function() {
                try {
                    const ttest = await testUpload(formData);
                    return ttest
                } catch (error) {
                    Swal.showValidationMessage(`
                        Request failed: ${error}
                    `);
                }
                // OutputFromTestUpload = ttest;
            })

            // Setelah testUpload dijalankan, jika Anda ingin melanjutkan pengiriman form:
            // form.submit();
        });

        const handleResponse = (data) => {
            // console.log(fileInput.value);
            if (data.ProductPicture) {
                // console.log(data.ProductPicture);
                // fileInput.accept = '*'
                // fileInput.value = data.ProductPicture;
                // Asumsikan response berisi nama file atau path file yang diunggah
                let hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'productImageHidden';
                hiddenInput.value = data.ProductPicture; // Atau URL dari file yang diunggah

                // Tambahkan input tersembunyi ke form
                form.appendChild(hiddenInput);
                // console.log(fileInput.value);
                // Update the profile picture URL and set it as the src attribute of the image element
                // profilePicture.src = data.profilePictureUrl;
            }
            // Setelah testUpload dijalankan, jika Anda ingin melanjutkan pengiriman form:
            form.submit();
        };

        // function testUpload() {
        //     // Make a POST request to upload the file
        //     fetch('/dashboard/upload', {
        //         method: 'POST',
        //         body: formData
        //     })
        //         .then(response => response.json())
        //         .then(handleResponse)
        //         .catch(error => console.error('Error:', error));
        // }
        async function testUpload(theData) {
            // Check if formData has a file
            if (!theData.has('productImage')) {
                throw new Error('File Upload must contain a file');
            }

            try {
                const response = await fetch('/dashboard/upload', {
                    method: 'POST',
                    body: theData
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Error:', error);
                throw error; // Re-throw the error to propagate it further if needed
            }
        }
    });

</script>